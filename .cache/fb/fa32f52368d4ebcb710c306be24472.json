{"id":"node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.esm.js","dependencies":[{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.esm.js.map","includedInParent":true,"mtime":1737013833255},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/package.json","includedInParent":true,"mtime":1737024873893},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/package.json","includedInParent":true,"mtime":1737013833255},{"name":"@tanstack/query-core","loc":{"line":2,"column":54,"index":68},"parent":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.esm.js","resolved":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/query-core/build/lib/index.esm.js"},{"name":"./useBaseQuery.esm.js","loc":{"line":3,"column":29,"index":121},"parent":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.esm.js","resolved":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/build/lib/useBaseQuery.esm.js"}],"generated":{"js":"\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useInfiniteQuery = useInfiniteQuery;\nvar _queryCore = require(\"@tanstack/query-core\");\nvar _useBaseQueryEsm = require(\"./useBaseQuery.esm.js\");\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const options = (0, _queryCore.parseQueryArgs)(arg1, arg2, arg3);\n  return (0, _useBaseQueryEsm.useBaseQuery)(options, _queryCore.InfiniteQueryObserver);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":0}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":9}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":25}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":26}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":30}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":32}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":36}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":38}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":42}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":10,"column":44}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":12,"column":2}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":12,"column":9}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":12,"column":13}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":12,"column":42}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":12,"column":44}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":12,"column":51}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":12,"column":53}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":12,"column":85}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":12,"column":86}},{"source":"../../src/useInfiniteQuery.ts","name":null,"original":{"line":101,"column":1},"generated":{"line":13,"column":0}}],"sources":{"../../src/useInfiniteQuery.ts":"'use client'\nimport { InfiniteQueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  QueryFunction,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n"},"lineCount":null}},"error":null,"hash":"1544b454e37c6aa7d92e914c9af53fe2","cacheData":{"env":{}}}