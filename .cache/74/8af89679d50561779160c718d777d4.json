{"id":"node_modules/@compiled/react/dist/browser/class-names/index.js","dependencies":[{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/dist/browser/class-names/index.js.map","includedInParent":true,"mtime":1737013830474},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/src/class-names/index.ts","includedInParent":true,"mtime":1737013830474},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/package.json","includedInParent":true,"mtime":1737024873893},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/package.json","includedInParent":true,"mtime":1737013830474},{"name":"../utils/error","loc":{"line":1,"column":33,"index":33},"parent":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/dist/browser/class-names/index.js","resolved":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/dist/browser/utils/error.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClassNames = ClassNames;\nvar _error = require(\"../utils/error\");\nfunction ClassNames(_props) {\n  throw (0, _error.createSetupError)();\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":10}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":13}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":20}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":57,"column":6},"generated":{"line":8,"column":0}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":57,"column":16},"generated":{"line":8,"column":9}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":57,"column":26},"generated":{"line":8,"column":19}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":57,"column":42},"generated":{"line":8,"column":20}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":57,"column":73},"generated":{"line":8,"column":26}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":57,"column":73},"generated":{"line":8,"column":28}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":9,"column":2}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":58,"column":8},"generated":{"line":9,"column":8}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":58,"column":8},"generated":{"line":9,"column":12}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":58,"column":24},"generated":{"line":9,"column":35}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":58,"column":24},"generated":{"line":9,"column":37}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":58,"column":26},"generated":{"line":9,"column":38}},{"source":"../../../src/class-names/index.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":10,"column":0}}],"sources":{"../../../src/class-names/index.ts":"import type { ReactNode, CSSProperties } from 'react';\n\nimport type { CssType, CssFunction } from '../types';\nimport { createSetupError } from '../utils/error';\n\nexport type ObjectInterpolation<TProps> = CssType<TProps> | CssType<TProps>[];\nexport type TemplateStringsInterpolation<TProps> = CssFunction<TProps> | CssFunction<TProps>[];\n\ninterface CssSignature<TProps> {\n  (...interpolations: ObjectInterpolation<TProps>[]): string;\n  (\n    template: TemplateStringsArray,\n    ...interpolations: TemplateStringsInterpolation<TProps>[]\n  ): string;\n}\n\nexport interface ClassNamesProps<TProps> {\n  children: (opts: { css: CssSignature<TProps>; style: CSSProperties }) => ReactNode;\n}\n\n/**\n * ## Class Names\n *\n * Use a component where styles are not necessarily used on a JSX element.\n * For further details [read the documentation](https://compiledcssinjs.com/docs/api-class-names).\n *\n * ### Style with objects\n *\n * @example\n * ```\n * <ClassNames>\n *   {({ css, style }) => children({ className: css({ fontSize: 12 }) })}\n * </ClassNames>\n * ```\n *\n * ### Style with template literals\n *\n * @example\n * ```\n * <ClassNames>\n *   {({ css, style }) => children({ className: css`font-size: 12px;` })}\n * </ClassNames>\n * ```\n *\n * ### Compose styles with arrays\n *\n * @example\n * ```\n * <ClassNames>\n *   {({ css, style }) =>\n *    children({ className: css([{ fontSize: 12 }, css`font-size: 12px`]) })}\n * </ClassNames>\n * ```\n */\nexport function ClassNames<TProps = void>({ children }: ClassNamesProps<TProps>): JSX.Element;\n\nexport function ClassNames<TProps = void>(_props: ClassNamesProps<TProps>): JSX.Element {\n  throw createSetupError();\n}\n"},"lineCount":null}},"error":null,"hash":"fb08e372c92c1bd1f12b310f647c60b7","cacheData":{"env":{}}}