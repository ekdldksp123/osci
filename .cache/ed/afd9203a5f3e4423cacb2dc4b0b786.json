{"id":"node_modules/@compiled/react/dist/browser/css-map/index.js","dependencies":[{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/dist/browser/css-map/index.js.map","includedInParent":true,"mtime":1737013830474},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/src/css-map/index.ts","includedInParent":true,"mtime":1737013830474},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/package.json","includedInParent":true,"mtime":1737024873893},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/package.json","includedInParent":true,"mtime":1737013830474},{"name":"../utils/error","loc":{"line":1,"column":33,"index":33},"parent":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/dist/browser/css-map/index.js","resolved":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@compiled/react/dist/browser/utils/error.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cssMap;\nvar _error = require(\"../utils/error\");\n/**\n * ## CSS Map\n *\n * Creates a collection of named styles that are statically typed and useable with other Compiled APIs.\n * For further details [read the documentation](https://compiledcssinjs.com/docs/api-cssmap).\n *\n * @example\n * ```\n * const styles = cssMap({\n *  none: { borderStyle: 'none' },\n *  solid: { borderStyle: 'solid' },\n * });\n *\n * <div css={styles.solid} />\n * ```\n */\nfunction cssMap(_styles) {\n  throw (0, _error.createSetupError)();\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":10}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":13}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":20}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":101,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":117,"column":14},"generated":{"line":24,"column":0}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":117,"column":24},"generated":{"line":24,"column":9}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":117,"column":30},"generated":{"line":24,"column":15}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":24,"column":16}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":123,"column":18},"generated":{"line":24,"column":23}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":123,"column":18},"generated":{"line":24,"column":25}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":127,"column":2},"generated":{"line":25,"column":2}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":127,"column":8},"generated":{"line":25,"column":8}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":127,"column":8},"generated":{"line":25,"column":12}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":127,"column":24},"generated":{"line":25,"column":35}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":127,"column":24},"generated":{"line":25,"column":37}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":127,"column":26},"generated":{"line":25,"column":38}},{"source":"../../../src/css-map/index.ts","name":null,"original":{"line":128,"column":0},"generated":{"line":26,"column":0}}],"sources":{"../../../src/css-map/index.ts":"import type * as CSS from 'csstype';\n\nimport type { CSSPseudos, CSSProperties } from '../types';\nimport { createSetupError } from '../utils/error';\nimport type { CompiledStyles } from '../xcss-prop';\n\ntype AllPseudos = { [key in CSSPseudos]?: CSSProperties & AllPseudos };\n\n// The `screen and (max-width: 768px)` part of `@media screen and (max-width: 768px)`.\n// Ideally we would do type checking to forbid this from containing the `@media` part,\n// but TypeScript doesn't provide a good way to do this.\ntype AtRuleSecondHalf = string;\ntype WhitelistedAtRule = {\n  [atRuleFirstHalf in CSS.AtRules]?: {\n    [atRuleSecondHalf in AtRuleSecondHalf]: CSSProperties & AllPseudos & WhitelistedAtRule;\n  };\n};\ntype WhitelistedSelector = AllPseudos & WhitelistedAtRule;\n\ntype ExtendedSelector = { [key: string]: CSSProperties | ExtendedSelector } & {\n  /**\n   * Using `selectors` is not valid here - you cannot nest a `selectors` object\n   * inside another `selectors` object.\n   */\n  selectors?: never;\n};\n\ntype ExtendedSelectors = {\n  /**\n   * Provides a way to use selectors that have not been explicitly whitelisted\n   * in cssMap.\n   *\n   * This does not provide any type-checking for the selectors (thus allowing\n   * more expressive selectors), though this is more flexible and allows\n   * nesting selectors in other selectors.\n   *\n   * A selector defined both outside of the `selectors` object and\n   * inside the `selectors` object is a runtime error.\n   *\n   * Note that you cannot nest a `selectors` object inside another\n   * `selectors` object.\n   *\n   * Only use if absolutely necessary.\n   *\n   * @example\n   * ```\n   * const myMap = cssMap({\n   *   danger: {\n   *     color: 'red',\n   *     '@media': {\n   *       '(min-width: 100px)': {\n   *         font-size: '1.5em',\n   *       },\n   *     },\n   *     '&:hover': {\n   *       color: 'pink',\n   *     },\n   *     selectors: {\n   *       '&:not(:active)': {\n   *         backgroundColor: 'yellow',\n   *       }\n   *     },\n   *   },\n   *   success: {\n   *     color: 'green',\n   *     '@media': {\n   *       '(min-width: 100px)': {\n   *         font-size: '1.3em',\n   *       },\n   *     },\n   *     '&:hover': {\n   *       color: '#8f8',\n   *     },\n   *     selectors: {\n   *       '&:not(:active)': {\n   *         backgroundColor: 'white',\n   *       }\n   *     },\n   *   },\n   * });\n   * ```\n   */\n  selectors?: ExtendedSelector;\n};\n\ntype LooseMediaQueries = Record<`@media ${string}`, CSSProperties & AllPseudos>;\n\n/**\n * We remap media query keys to `\"@media\"` so it's blocked inside the strict APIs.\n * This is done as it's currently impossible to ensure type safety end-to-end â€” when\n * passing in unknown media queries from the loose API into the strict API you end up\n * being also able to pass any styles you want, which makes the whole point of the strict\n * API meaningless.\n *\n * Sorry folks!\n */\ntype RemapMedia<TStyles> = {\n  [Q in keyof TStyles as Q extends `@media ${string}` ? '@media [loose]' : Q]: TStyles[Q];\n};\n\n/**\n * ## CSS Map\n *\n * Creates a collection of named styles that are statically typed and useable with other Compiled APIs.\n * For further details [read the documentation](https://compiledcssinjs.com/docs/api-cssmap).\n *\n * @example\n * ```\n * const styles = cssMap({\n *  none: { borderStyle: 'none' },\n *  solid: { borderStyle: 'solid' },\n * });\n *\n * <div css={styles.solid} />\n * ```\n */\nexport default function cssMap<\n  TStyles extends Record<\n    string,\n    CSSProperties & WhitelistedSelector & ExtendedSelectors & LooseMediaQueries\n  >\n>(\n  _styles: TStyles\n): {\n  readonly [P in keyof TStyles]: CompiledStyles<RemapMedia<TStyles[P]>>;\n} {\n  throw createSetupError();\n}\n"},"lineCount":null}},"error":null,"hash":"7003d2ee5d6cb03b1e3ab20842345e13","cacheData":{"env":{}}}