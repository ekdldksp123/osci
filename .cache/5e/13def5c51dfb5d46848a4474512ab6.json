{"id":"node_modules/@tanstack/react-query/build/lib/useQuery.esm.js","dependencies":[{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/build/lib/useQuery.esm.js.map","includedInParent":true,"mtime":1737013833255},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/package.json","includedInParent":true,"mtime":1737024873893},{"name":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/package.json","includedInParent":true,"mtime":1737013833255},{"name":"@tanstack/query-core","loc":{"line":2,"column":46,"index":60},"parent":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/build/lib/useQuery.esm.js","resolved":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/query-core/build/lib/index.esm.js"},{"name":"./useBaseQuery.esm.js","loc":{"line":3,"column":29,"index":113},"parent":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/build/lib/useQuery.esm.js","resolved":"/Users/vinchaekim/Documents/workspace/react-typescript-parcel-starter/node_modules/@tanstack/react-query/build/lib/useBaseQuery.esm.js"}],"generated":{"js":"\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useQuery = useQuery;\nvar _queryCore = require(\"@tanstack/query-core\");\nvar _useBaseQueryEsm = require(\"./useBaseQuery.esm.js\");\nfunction useQuery(arg1, arg2, arg3) {\n  const parsedOptions = (0, _queryCore.parseQueryArgs)(arg1, arg2, arg3);\n  return (0, _useBaseQueryEsm.useBaseQuery)(parsedOptions, _queryCore.QueryObserver);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":0}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":9}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":17}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":18}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":22}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":24}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":28}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":30}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":34}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":127,"column":7},"generated":{"line":10,"column":36}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":12,"column":2}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":12,"column":9}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":12,"column":13}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":12,"column":42}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":12,"column":44}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":12,"column":57}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":12,"column":59}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":12,"column":83}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":12,"column":84}},{"source":"../../src/useQuery.ts","name":null,"original":{"line":141,"column":1},"generated":{"line":13,"column":0}}],"sources":{"../../src/useQuery.ts":"'use client'\nimport { QueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n"},"lineCount":null}},"error":null,"hash":"a9cee75b99b08e87dee5337159279f40","cacheData":{"env":{}}}